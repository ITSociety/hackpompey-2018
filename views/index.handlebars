

<div id='particles-js'>
  <div class="space">
    <div class="stats">
      <div class="meatsacks">Total meatsacks:
        <span class="meatsacks-total"></span>
      </div>
      <div class="currency">Total currency:
        <span class="currency-total"></span>
      </div>
    </div>
    <div class="planet"></div>
  </div>
  <div class="reset">KILL ALL</div>

  <div class="unlock-container">
    <span class="store-title">Unlocks ðŸ”“</span> 
    <div class="unlocks"></div>
  </div> 
  
  <div class="stats-container">
    <span class="stats-title">Stats</span>
    <div class="meatsacks">Total meatsacks P/S:
      <span class="meatsacks-ps-total"></span>
    </div>
    <div class="currency">Total currency P/S:
      <span class="currency-ps-total"></span>
    </div>
  </div>
  
</div>

<style>
  /* ---- reset ---- */

body {
  margin: 0;
  background-color: #17182f;
  color: #fff;
  font-family: monospace;
}

canvas {
  display: block;
  vertical-align: bottom;
}


/* ---- particles.js container ---- */

#particles-js {
  position: absolute;
  width: 100%;
  height: 100%;
}
.planet {
  width: 200;
  height: 200;
  background: blue;
  display: block;
  border-radius: 100px;
  cursor: pointer;
  margin: 20px 0px 20px 0px;
}

.space {
  position: absolute;
  right: 50%;
  margin-right: -100px;
  width: 200px;
  text-align: center;
}

.stats {
  text-align: center;
  font-size: 2em;
  font-family: monospace;
}

.stats-title{
  text-align: left !important;
  font-size: 1.5em;
}

.unlock {
  cursor: pointer;
} 
.unlocked{
  border: 0.5px #fff solid;
  padding: 5px;
  margin: 10px;
}
.unlock-container{
  border: #fff 1px solid;
  float: right;
  max-width: 30%;
  min-width: 31%;
  padding: 10px;
  margin: 10px 10px 0 0;
}

.stats-container{
  border: #fff 1px solid;
  float: left;
  max-width: 30%;
  min-width: 31%;
  padding: 10px;
  text-align: right;
  margin: 10px 0 0 10px;
}

.store-title{
  font-size: 1.5em;
}

.reset {
  position: absolute;
  cursor: pointer;
  bottom: 0;
  font-size: 2em;
  color: red;
}
</style>
<script>
  const totalPeople = document.querySelector('.meatsacks-total');
  const totalMoney = document.querySelector('.currency-total');
  
  const totalPeoplePS = document.querySelector('.meatsacks-ps-total');
  const totalMoneyPS = document.querySelector('.currency-ps-total');
  
  const planet = document.querySelector('.planet');

  const reset = document.querySelector('.reset');

  const unlocks = document.querySelector('.unlocks');
  
  let peopleCount = 1;
  let moneyCount = 0;
  let peoplePerSecond = 0;
  let moneyPerSecond = 0;
  

  // some unlockable:
  /** { 
    title: 'sex', 
    description: '', 
    humansRequired: 2, 
    humansCost: 0,
    currencyCost: 0, 
    humansPerSecond: 1, 
    currencyPerSecond: 0,
    humanMultiplier: 1,
    currencyMultiplier: 1,
  }
  */

  const allUnlocks = [];
  let availableUnlocks = []
  const unlocked = []


  planet.addEventListener('click', (ev) => {
    ev.preventDefault();
    peopleCount += 1;
    totalPeople.textContent = Math.floor(peopleCount);
  })

  reset.addEventListener('click', (ev) => {
      ev.preventDefault();
      peopleCount = 1;
      moneyCount = 0;
      peoplePerSecond = 0;
      moneyPerSecond = 0;
    })

  // Add currency per second to our bank
  function main() {
    peopleCount += peoplePerSecond;
    moneyCount += moneyPerSecond;
    
    totalPeople.textContent = Math.floor(peopleCount);
    totalMoney.textContent = Math.floor(moneyCount);

    totalPeoplePS.textContent = peoplePerSecond;
    totalMoneyPS.textContent = moneyPerSecond;
    save();
    generateAvailableUnlocks()
  }

  // add our clicks to our bank
  function generateAvailableUnlocks() {
    const elements = getUnlocksDomList(allUnlocks.filter(unlock => -1 == unlocked.indexOf(unlock.id)).filter(unlock => peopleCount >= unlock.peoplerequired && moneyCount >= unlock.currencyrequired)).splice(0,5);

    if(elements.length !== unlocks.childNodes.length) {
      unlocks.innerHTML = "";
      elements.forEach(unlock => unlocks.appendChild(unlock));
    }
  }

  function h(args, text, classList='') {
    const elem = document.createElement(args);
    elem.classList = classList;
    elem.textContent = text;
    return elem;
  };

  function unlockElement(elem) {
      console.log(peoplePerSecond + parseFloat(elem.dataset.peoplemultiplier));

      peoplePerSecond = peoplePerSecond + parseFloat(elem.dataset.peoplemultiplier);
      moneyPerSecond = moneyPerSecond + parseFloat(elem.dataset.currencymultiplier);

      console.log(peoplePerSecond, moneyPerSecond);

      //peoplePerSecond = ((peoplePerSecond > 0 ? peoplePerSecond * elem.dataset.peoplemultiplyer : 1 * elem.dataset.peoplemultiplyer));
      //moneyPerSecond = ((moneyPerSecond > 0 ? moneyPerSecond * elem.dataset.currencymultiplyer : 0 * elem.dataset.currencymultiplyer));
      //peopleCount = elem.dataset.currencyCost;
      //moneyCount = parseInt(moneyCount, 10) - parseInt(elem.dataset.currencycost, 10);
      unlocked.push(parseInt(elem.dataset.id,10));
  }

  const getUnlocksDomList = (a, locked = false) => a
    .map(unlock => {
      const outer = h('div', '', `unlock ${locked ? 'locked' : 'unlocked'}`);
      const nameDOM = h('span', unlock.title, 'unlock-name');
      const descDOM = h('div', unlock.description, 'unlock-desc');
      const costDOM = h('span', unlock.currencycost, 'unlock-cost');
      [nameDOM, descDOM, costDOM].forEach(elem => outer.appendChild(elem));
      Object.keys(unlock).forEach(key => outer.dataset[key] = unlock[key]);
      outer.addEventListener('click', () => unlockElement(outer));
      return outer;      
    });

  // unlock things and change our currencyPerSecond or humans/s
  function unlock() {

  }

  function save() {
    localStorage.setItem(
      'stats',
      // globals
      JSON.stringify({ 
        moneyPerSecond, 
        peoplePerSecond,
        peopleCount, 
        moneyCount, 
      })
    );
  }

  function load() {
    const saved = JSON.parse(localStorage.getItem('stats'));
    if (!saved) return;
    console.log('loading data:', { saved });
    peopleCount = saved.peopleCount;
    currencyPerSecond = saved.currencyPerSecond;
    moneyCount = saved.moneyCount;
    peoplePerSecond = saved.peoplePerSecond;
  }
  
  let interval;
  window.onload = () => {
    load();
    main();
    setInterval(main, 1000);
  }

  socket.on('unlocks', (rows) => {
      const parsed = JSON.parse(rows);
      allUnlocks.length = 0;
      console.log({ ...parsed })
      allUnlocks.push(...parsed);

      //if (interval) clearInterval(interval);
      //interval = setInterval(main, 1000);
    });
</script>

<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>

<script>
particlesJS("particles-js", {
  "particles": {
    "number": {
      "value": 355,
      "density": {
        "enable": true,
        "value_area": 789.1476416322727
      }
    },
    "color": {
      "value": "#ffffff"
    },
    "shape": {
      "type": "circle",
      "stroke": {
        "width": 0,
        "color": "#000000"
      },
      "polygon": {
        "nb_sides": 5
      },
      "image": {
        "src": "img/github.svg",
        "width": 100,
        "height": 100
      }
    },
    "opacity": {
      "value": 0.48927153781200905,
      "random": false,
      "anim": {
        "enable": true,
        "speed": 0.2,
        "opacity_min": 0,
        "sync": false
      }
    },
    "size": {
      "value": 2,
      "random": true,
      "anim": {
        "enable": true,
        "speed": 2,
        "size_min": 0,
        "sync": false
      }
    },
    "line_linked": {
      "enable": false,
      "distance": 150,
      "color": "#ffffff",
      "opacity": 0.4,
      "width": 1
    },
    "move": {
      "enable": true,
      "speed": 0.2,
      "direction": "none",
      "random": true,
      "straight": false,
      "out_mode": "out",
      "bounce": false,
      "attract": {
        "enable": false,
        "rotateX": 600,
        "rotateY": 1200
      }
    }
  },
  "interactivity": {
    "detect_on": "canvas",
    "events": {
      "onhover": {
        "enable": true,
        "mode": "bubble"
      },
      "onclick": {
        "enable": true,
        "mode": "push"
      },
      "resize": true
    },
    "modes": {
      "grab": {
        "distance": 400,
        "line_linked": {
          "opacity": 1
        }
      },
      "bubble": {
        "distance": 83.91608391608392,
        "size": 1,
        "duration": 3,
        "opacity": 1,
        "speed": 3
      },
      "repulse": {
        "distance": 200,
        "duration": 0.4
      },
      "push": {
        "particles_nb": 4
      },
      "remove": {
        "particles_nb": 2
      }
    }
  },
  "retina_detect": true
});
</script>